// Интерполяция
// Интерполяция - процесс, который дает возможность указать java-script выражение внутри строки

// let hi = 'Привет'
// let my = 'мой'
// let friend = 'друг' 

// Задание: сформировать из переменных предложение, соблюдая правила пунктуации. 
// Вывести это предложение в консоль

// Решение без интерполяции (конкатенация)

// console.log(hi + ', ' + my + ' ' + friend + '.')

// Решние с интерполяцией
// Правила:
// 1. Строка должна быть объявлена через апострофы
// 2. Выражение должно находиться внутри ${}

// console.log(`${hi}, ${my} ${friend}.`)

// Задача 1
// Есть переменные r, g, b с числовыми значениями. 
// Вывести в консоль строку “rgb(12, 34, 14)” используя конкатенацию и интерполяцию

// let r = 10
// let g = 20
// let b = 100

//Решение 1 (конкатенация)
// console.log('rgb(' + r + ', ' + g + ', ' + b +')') 

//Решение 2 (интерполяция)
// console.log(`rgb(${r}, ${g}, ${b})`)

// -------------------
// Что еще может делать интерполяция?

// console.log(`${6 ** 12} - это число`)
// console.log(`${6 / 12} - это число`)
// console.log(`${6 - 12} - это число`)


// ----------------------------------------------------
// Функция isNaN().

// В чем заключается проблема

// true
// console.log(10 == 10)

// Числовый тип NaN не равен самому себе
// console.log(NaN == NaN)

// Функция isNaN() возвращает булевый тип (true, false)

// let a = NaN
// let a = 10

// console.log(isNaN(a))

// Задача 2

// Написать программу, которая считывает значение из переменной value 
// и выводит фразу “Это значение можно преобразовать в число” или 
// “Это значение преобразовать в число не получится. Получится NaN”

// let value = '100'

// if (isNaN(+value)){
//     console.log('Это значение преобразовать в число не получится. Получится NaN')
// } else {
//     console.log('Это значение можно преобразовать в число')
// }