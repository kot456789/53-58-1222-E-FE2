// Конструкция async await
// Специальная коснтрукция, которая предполагает более удобную работу над промисами (сетевых запросов)
// (синтаксичских сахар)

// Ранее нами известный подход
// let url = 'https://jsonplaceholder.typicode.com/users'

// fetch(url)
//     .then(res => res.json())
//     .then(data => console.log(data))

// Абсолютно такое же решение, только используя async await
// 1) Синтаксический сахар, который позволяет избежать метода then
// 2) применяется строго к функциям. Перед вйункцией должно быть казано клюечвое слово async
// 3) чтобы сохранить результат работы промиса, перед присвоением у перемнной необходимо указать ключевое слово await
// 4) Избегает метод then, но не catch (см конструкцию try ... catch)

// async function fetchUsers(){
//     let url = 'https://jsonplaceholder.typicode.com/users'
//     let res = await fetch(url)
//     let data = await res.json()
//     console.log(data)
// }

// fetchUsers()



// ---------------------------------------------------------------
// Обработчик ошибок try ... catch
// Данная кострукция позволит обработать ошибку и далее продолжить выполнение скрпита

// --------------
// В данном примере лог не выполнится, поскокльку переменная b не найдена (будет ошибка)
// let a = b + 10

// console.log(1000)

// --------------
// Пример обработки ошибки и далее выполнение скрипта
// В блоке try указывается проблемный участок кода, который может вызвать ошибку
// В блоке catch указывается код, который будет выполнен только в случае, если зафиксируется ошибка
// Данная конструкция не может обрабатывать синтакисечские ошибки

// try {
//     let a = 10 + 10
// } catch {
//     console.log('ошибки была зафиксирована!');
// }

// console.log(a)


// ----------------------------
// аналог catch в конструкции async await
// Применение try catch в async await (в случае, если будет reject)

async function fetchUsers(){
    let url = 'https://jsonplaceholder.typicode.com/users'
    try {
        let res = await fetch(url)
        let data = await res.json()
        console.log(data)
    } catch {
        alert('предупреждение клиента об ошибке ошибки');
    }
    console.log(123);
}

fetchUsers()

